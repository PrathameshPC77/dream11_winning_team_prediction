# -*- coding: utf-8 -*-
"""devtown-dream11-bootcamp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VLp_Ij9rknLojs6hKLTbFt2Wj7Olsy0q
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score
from xgboost import XGBClassifier
from sklearn.preprocessing import LabelEncoder

df = pd.read_csv('matches.csv')

df

df.head()

print(df.isnull().sum())

df=df.dropna(subset=['winner'])

df

print(df.isnull().sum())

team_city_map = {
    'Mumbai Indians': 'Mumbai',
    'Chennai Super Kings': 'Chennai',
    'Delhi Capitals': 'Delhi',
    'Kolkata Knight Riders': 'Kolkata',
    'Royal Challengers Bangalore': 'Bangalore',
    'Sunrisers Hyderabad': 'Hyderabad',
    'Rajasthan Royals': 'Jaipur',
    'Punjab Kings': 'Mohali',
    'Kings XI Punjab': 'Mohali',
    'Deccan Chargers': 'Hyderabad',
    'Gujarat Titans': 'Ahmedabad',
    'Lucknow Super Giants': 'Lucknow',
    'Rising Pune Supergiants': 'Pune',
    'Pune Warriors': 'Pune'
}

df['team1_home_city'] = df['team1'].map(team_city_map)
df['team2_home_city'] = df['team2'].map(team_city_map)

df['home_advantage_team1'] = (df['team1_home_city']==df['city']).astype(int)
df['home_advantage_team2'] = (df['team2_home_city']==df['city']).astype(int)

df

X = df[['city','venue','team1','team2', 'toss_winner', 'toss_decision', 'target_runs','target_overs', 'home_advantage_team1','home_advantage_team2']]
y = df['winner']

for col in X.select_dtypes(include='object').columns:
  X[col] = LabelEncoder().fit_transform(X[col].astype(str))

y = LabelEncoder().fit_transform(y)

X

y

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify=y, random_state = 42)
X_train_full, X_val, y_train_full, y_val = train_test_split(X_train, y_train, test_size=0.2, stratify=y_train, random_state=42)

print(X_train.shape, X_test.shape, X.shape)

model = XGBClassifier()

model.fit(
    X_train_full,y_train_full,
    eval_set=[(X_val,y_val)],
    verbose = False
)

train_acc = accuracy_score(y_train_full,model.predict(X_train_full))
test_acc = accuracy_score(y_test,model.predict(X_test))

print(f"Training Accuracy : {train_acc:.2f}")
print(f"Testing Accuracy : {test_acc:.2f}")

from sklearn.model_selection import GridSearchCV

param_grids={
    'max_depth' : [3,5],
    'learning_rate' : [0.05,0.01,0.1],
    'n_estimators' : [100,125,75],
    'subsample' : [0.7,0.9,1.0],
    'colsample_bytree':[0.7,0.8,1.0]
}  # 2*3*3*3*3

grid_search = GridSearchCV(estimator = model, param_grid=param_grids, cv=3, n_jobs=-1, scoring='accuracy', verbose = 2)
grid_search.fit(X_train_full,y_train_full)

print(grid_search.best_params_)

best_model = grid_search.best_estimator_

best_model.fit(X_train_full,y_train_full,eval_set=[(X_val,y_val)], verbose=False)

train_acc = accuracy_score(y_train_full,best_model.predict(X_train_full))
test_acc = accuracy_score(y_test,best_model.predict(X_test))

print(f"Training Accuracy : {train_acc:.2f}")
print(f"Testing Accuracy : {test_acc:.2f}")

import pickle

with open("model.pkl",'wb')as f:
  pickle.dump(model,f)

